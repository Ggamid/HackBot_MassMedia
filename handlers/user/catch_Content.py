from aiogram import types
from states import GetInfo
from aiogram.dispatcher import FSMContext
from loader import dp
from handlers.group.send_lot import send_lot_func
from keyboards import get_permission, yes_no
from utils.check_int import check


@dp.message_handler(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ö–æ–Ω—Ç–µ–Ω—Ç üì∏")
async def getContent(message: types.Message):
    await message.answer(f"–ö–∏–¥–∞–π –∫–∞—Ä—Ç–∏–Ω–∫—É –∫–æ—Ç–æ—Ä–∞—è —Å—Ç–∞–Ω–µ—Ç –æ–±–ª–æ–∂–∫–æ–π —Ç–≤–æ–µ–π –Ω–æ–≤–æ—Å—Ç–∏! üì∏üí¨", parse_mode="HTML")
    await GetInfo.getContent.set()


@dp.message_handler(content_types=['photo'], state=GetInfo.getContent)
async def getContent_step2(message: types.Message, state: FSMContext):
    print()
    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç üí¨. –í–Ω–∞—á–∞–ª–µ —Å—Ç–æ–∏—Ç —É–¥–µ–ª–∏—Ç—å –æ–¥–∏–Ω –∞–±–∑–∞—Ü –∫—Ä–∞—Ç–∫–æ–º—É –∏ —Ü–µ–ø–ª—è—é—â–µ–º—É –æ–ø–∏—Å–∞–Ω–∏—é üìù")
    answer = message.photo[-1].file_id
    await state.update_data(getContent=answer)
    await GetInfo.getText.set()
    return


@dp.message_handler(state=GetInfo.getContent)
async def getContent_step2_error(message: types.Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ")


@dp.message_handler(content_types=['text'], state=GetInfo.getText, )
async def getContent_step3(message: types.Message, state: FSMContext):
    answer = message.text
    await state.update_data(getText=answer)


    await message.answer(
        "–ê —Ç–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—É üí∞. \n\n P.s –Ω–µ —Å—Ç–æ–∏—Ç —Å–∏–ª—å–Ω–æ –∑–∞–≤—ã—à–∞—Ç—å —Ü–µ–Ω—É, —Ç.–∫ –≤–∞—à—É –Ω–æ–≤–æ—Å—Ç—å –ø—Ä–æ—Å—Ç–æ –Ω–∏–∫—Ç–æ –Ω–µ –∫—É–ø–∏—Ç)")

    data = await state.get_data()
    photo = data.get("getContent")
    text = f"{data.get('getText')}"

    await message.answer_photo(photo, text)
    await GetInfo.getPrice.set()
    # await send_lot_func(photo, text, message.from_user.id)
    return


@dp.message_handler(state=GetInfo.getText)
async def getContent_step3_error(message: types.Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç")


@dp.message_handler(content_types=['text'], state=GetInfo.getPrice, )
async def getContent_step4(message: types.Message, state: FSMContext):
    if not check(message.text):
        await getContent_step4_error(message)
        return

    answer = message.text
    await state.update_data(getPrice=answer)
    await message.answer("–í–æ—Ç —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å:")

    data = await state.get_data()
    photo = data.get("getContent")
    text = f"{data.get('getText')}"
    price = f"{data.get('getPrice')}"

    await message.answer_photo(photo, f"{text} \n\n –¶–µ–Ω–∞: {price} üí∏")
    await message.answer("–ë—É–¥–µ–º –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –¥–ª—è —Ä–µ–ø–æ—Ä—Ç–µ—Ä–æ–≤?", reply_markup=yes_no())
    await GetInfo.getPermission.set()


@dp.message_handler(state=GetInfo.getPrice)
async def getContent_step4_error(message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ")


@dp.callback_query_handler(state=GetInfo.getPermission)
async def getContent_step5(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "YES":
        await callback.answer('–ì–æ—Ç–æ–≤–æ! –í–∞—à–∞ –Ω–æ–≤–æ—Å—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞')
        data = await state.get_data()
        photo = data.get("getContent")
        text = f"{data.get('getText')}"
        price = f"{data.get('getPrice')}"

        await callback.message.answer_photo(photo, f"{text} \n\n –¶–µ–Ω–∞: {price} üí∏")
        await state.finish()
        print(callback)
        await send_lot_func(photo, text, callback.message.from_user.id, price, callback.message["chat"]['username'])
        return
    else:
        await callback.answer("–û–∫–µ–π, –º—ã —É–¥–∞–ª–∏–º —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ")
        await state.finish()
